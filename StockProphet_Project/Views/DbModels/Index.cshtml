@model IEnumerable<StockProphet_Project.Models.DbModel>
@using System.Text.Json;
@{
	ViewData["Title"] = "管理者頁面-Model資訊";
}
<style>
	.model-container {
		width: 80%;
	}

	@@media screen and (max-width: 1200px) .model-container {
		width: 100%;
	}



	.myTable thead tr::after {
		content: "";
		background-color: #f5f5f5;
		height: 175px;
	}
</style>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<div class="area-container">
	<div class="model-container">
		<h1>管理者頁面(Model)</h1>
		<br>
		<div class="btn-area">
			<button class="btn-w-hover mg-btn" onclick="loadModel('DbMembers')">會員頁</button>
			<button class="btn-w-hover mg-btn" onclick="loadModel('DbModels')">模型頁</button>
			<button class="btn-w-hover mg-btn" onclick="loadModel('DbCollects')">會員收藏</button>
			<button class="btn-w-hover mg-btn" onclick="loadModel('Stocks')">股票資料</button>
		</div>
		<br>
		<br>
		<div class="d-xl-flex justify-content-around">
			<canvas id="barChart" width="400" height="400"></canvas>
			<canvas id="accountprefer" width="400" height="400"></canvas>

		</div>
		<p>
			<a asp-action="Create" class="a-style">Create New</a>
		</p>


		<div class="form-floating mb-3" style="max-width: 300px;">
			
			<input class="form-control" type="type" name="name" id="Pidselect" value="" />
			<label class="form-label">PID搜尋欄</label>
		</div>
		<div class="myTable" id="modelpage">
			<table class="table">
				<thead>
					<tr>
						<th>
							@Html.DisplayNameFor(model => model.Pid)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.Pstock)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.Pvariable)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.Plabel)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.Pprefer)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.Paccount)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.PbulidTime)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.PfinishTime)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.Pstatus)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.Dummyblock)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.Pmodel)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.PAccuracyRatio)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.PreDictLabel)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.PCurLabel)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.PreTrend)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.PActTrend)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.PResult)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.PSpreadRatio)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.PUpdateTime)
						</th>
						<th></th>
					</tr>
				</thead>
				<tbody id="tableBody" class="table-row-hover">
					@foreach (var item in Model)
					{
						<tr>
							<td>
								@Html.DisplayFor(modelItem => item.Pid)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.Pstock)
							</td>
							<td>

								@{
									var a = item.Pvariable;
									string b = "";
									a = a.Replace("[", "");
									a = a.Replace("]", "");
									a = "," + a;
									for (int i = 1; i < a.Split(",").Count(); i++)
									{
										if (i % 4 == 0)
										{
											b += a.Split(",")[i] + "\r\n";

										}
										else
										{

											b += a.Split(",")[i] + ", ";
										}

									}


								}
								@b
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.Plabel)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.Pprefer)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.Paccount)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.PbulidTime)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.PfinishTime)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.Pstatus)
							</td>
							<td>
								@{
									var c = item.Dummyblock;
									string d = "";
									c = c.Replace("{", "");
									c = c.Replace("}", "");
									c = "," + c;
									for (int i = 1; i < c.Split(",").Count(); i++)
									{
										if (i % 4 == 0)
										{
											d += c.Split(",")[i] + "\r\n";

										}
										else
										{

											d += c.Split(",")[i] + ", ";
										}

									}


								}
								@d
								
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.Pmodel)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.PAccuracyRatio)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.PreDictLabel)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.PCurLabel)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.PreTrend)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.PActTrend)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.PResult)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.PSpreadRatio)
							</td>
							<td>
								@Html.DisplayFor(modelItem => item.PUpdateTime)
							</td>
							<td>
								<a class="a-style" asp-action="Edit" asp-route-id="@item.Pid">Edit</a>
								<a class="a-style" asp-action="Details" asp-route-id="@item.Pid">Details</a>
								<a class="a-style" asp-action="Delete" asp-route-id="@item.Pid">Delete</a>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
</div>


<script>

	function loadModel(model) {
		// console.log(model)
		window.location.href = `/${model}/Index`
	}

	$("#Pidselect").on("change", function () {
		if ($("#Pidselect").val() == "") {
			location.reload(); // 重新加载页面
		} else {
			$.ajax({
				url: "/DbModels/orderdata",
				method: "get",
				data: { data: $("#Pidselect").val() },
				success: function (e) {
					console.log(e);
					$("#tableBody").empty();
					$.each(e, function (index, item) {
						var editUrl = '@Url.Action("Edit", "ControllerName")' + '?id=' + item.Pid;
						var detailsUrl = '@Url.Action("Details", "ControllerName")' + '?id=' + item.Pid;
						var deleteUrl = '@Url.Action("Delete", "ControllerName")' + '?id=' + item.Pid;
						var row = "<tr>" +
							"<td>" + item.Pid + "</td>" +
							"<td>" + item.Pstock + "</td>" +
							"<td>" + item.Pvariable + "</td>" +
							"<td>" + item.Plabel + "</td>" +
							"<td>" + item.Pprefer + "</td>" +
							"<td>" + item.Paccount + "</td>" +
							"<td>" + item.PbulidTime + "</td>" +
							"<td>" + item.PfinishTime + "</td>" +
							"<td>" + item.Pstatus + "</td>" +
							"<td>" + item.Dummyblock + "</td>" +
							"<td>" + item.Pmodel + "</td>" +
							"<td>" + item.PAccuracyRatio + "</td>" +
							"<td>" + item.PreDictLabel + "</td>" +
							"<td>" + item.PCurLabel + "</td>" +
							"<td>" + item.PreTrend + "</td>" +
							"<td>" + item.PActTrend + "</td>" +
							"<td>" + item.PResult + "</td>" +
							"<td>" + item.PSpreadRatio + "</td>" +
							"<td>" + item.PUpdateTime + "</td>" +
							"<td>" +
							"<a class='a-style' href='" + editUrl + "'>Edit</a> |" +
							"<a class='a-style' href='" + detailsUrl + "'>Details</a> |" +
							"<a class='a-style' href='" + deleteUrl + "'>Delete</a>" +
							"</td>" +
							"</tr>";
						$("#tableBody").append(row);
					});
				}
			});
		}
	});
	var stocknumber = [];
	var accountprefer = [];
	$.ajax({

		url: "/DbModels/barchart",
		method: "get",
		success: function (e) {

			$.each(e, function (index, element) {

				stocknumber.push({ stockname: element["Pstock"] })
				accountprefer.push({ accountname: element["Paccount"], accountprefer: element["Pprefer"] })

			})
			drawBarChart(stocknumber);
			drawcustomerChart(accountprefer);


		}

	})
	function drawBarChart(data) {
		var ctx = document.getElementById('barChart').getContext('2d');
		var labels = [];
		var counts = {};


		data.forEach(function (item) {
			var stockname = item.stockname;
			counts[stockname] = counts[stockname] ? counts[stockname] + 1 : 1;
		});

		labels = Object.keys(counts);


		var data = labels.map(function (label) {
			return counts[label];
		});


		var myChart = new Chart(ctx, {
			type: 'bar',
			data: {
				labels: labels,
				datasets: [{
					label: 'Stock Counts',
					data: data,
					backgroundColor: 'rgba(54, 162, 235, 0.2)',
					borderColor: 'rgba(54, 162, 235, 1)',
					borderWidth: 1
				}]
			},
			options: {
				scales: {
					yAxes: [{
						ticks: {
							beginAtZero: true
						}
					}]
				},
				responsive: false
			}
		});
	}
	function drawcustomerChart(accountprefer) {
		// Convert preference numbers to labels
		accountprefer.forEach(function (item) {
			item.accountprefer = item.accountprefer === 1 ? 'Short-term' : 'Long-term';
		});

		var counts = {};
		var labels = [];
		var datasets = {};

		// Count the occurrences of each accountprefer for each accountname
		accountprefer.forEach(function (item) {
			var accountName = item.accountname;
			var preference = item.accountprefer;

			if (!counts[accountName]) {
				counts[accountName] = { 'Short-term': 0, 'Long-term': 0 };
			}

			counts[accountName][preference]++;
		});

		// Extract unique accountnames and preferences
		labels = Object.keys(counts);
		var preferences = ['Short-term', 'Long-term'];

		// Initialize datasets
		preferences.forEach(function (preference) {
			datasets[preference] = {
				label: preference,
				data: [],
				backgroundColor: preference === 'Short-term' ? 'rgba(255, 99, 132, 0.5)' : 'rgba(54, 162, 235, 0.5)',
				borderColor: preference === 'Short-term' ? 'rgba(255, 99, 132, 1)' : 'rgba(54, 162, 235, 1)',
				borderWidth: 1
			};
		});

		// Populate data for each dataset
		labels.forEach(function (label) {
			preferences.forEach(function (preference) {
				datasets[preference].data.push(counts[label][preference] || 0);
			});
		});

		// Create chart
		var ctx = document.getElementById('accountprefer').getContext('2d');
		var myChart = new Chart(ctx, {
			type: 'bar',
			data: {
				labels: labels,
				datasets: Object.values(datasets)
			},
			options: {
				responsive: false, // Disable responsiveness
				scales: {
					x: {
						stacked: true,
						title: {
							display: true,
							text: 'Account Name'
						}
					},
					y: {
						stacked: true,
						title: {
							display: true,
							text: 'Number of Preferences'
						}
					}
				}
			}
		});
	}


	$(".btn-area .mg-btn:nth-child(2)").css({
		"color": "white",
		"background-color": "#87aeb4"
	})

</script>
