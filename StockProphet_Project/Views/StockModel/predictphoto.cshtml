@{
	ViewData["Title"] = "股票預測";
	int finishdate;
	switch (@ViewBag.result.usingModel)
	{
		case "LSTM":
			finishdate = 30;
			break;
		case "FNN":
			finishdate = 5;
			break;
		case "迴歸":
			finishdate = 30;
			break;
		case "時間序列":
			finishdate = 5;
			break;
		default:
			finishdate = 0;
			break;
	}
}
<!-- 引入 Chart.js 库 -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<h1>預測股票代號: @ViewBag.result.SnCode </h1>
<h1 id="stockname"></h1>
<h1>使用模型: @ViewBag.result.usingModel</h1>
<h1>@finishdate 天後預測收盤價: @ViewBag.result.PredictedData</h1>
<h1>MSE-Loss: @ViewBag.result.PredictedLoss</h1>
<button id="mypredictresult">跳轉我的預測</button>
<button id="mystockid">跳轉個股</button>
<!-- 创建一个 canvas 元素用于绘制图表 -->
<canvas id="stockChart" width="800" height="400"></canvas>

<script>
	var actualData = @Html.Raw(Json.Serialize(ViewBag.result.ChartData));
	var predictedData = @Html.Raw(Json.Serialize(ViewBag.result.PredictedData));
	
	var formattedData = actualData.map(function (item) {
		var date = moment(item.StDate).format('YYYY-MM-DD');
		return {
			x: date,
			y: item.SteClose,
			label: '日期: ' + date + ', 收盤價: ' + item.SteClose
		};
	});

	var lastActualDate = moment(formattedData[formattedData.length - 1].x);
	var predictedDate = moment(lastActualDate).add(@finishdate, 'day');
	var formattedPredictedDate = predictedDate.format('YYYY-MM-DD');
	var predictedClosePrice = predictedData;
	var predictedDate1 = predictedDate.format('YYYY-MM-DD')
	console.log(typeof predictedDate1);
	console.log(typeof formattedPredictedDate);
	var ctx = document.getElementById('stockChart').getContext('2d');

	var stockChart = new Chart(ctx, {
		type: 'line',
		data: {
			labels: [],
			datasets: [{
				label: '實際收盤價',
				data: formattedData,
				borderColor: 'blue',
				fill: false
			}, {
				label: '預測收盤價',
				data: [{
					x: formattedPredictedDate,
					y: predictedClosePrice
				}],
				borderColor: 'red',
				fill: false,
				pointRadius: 10
			}, {
				label: '趨勢線',
				data: [{
					x: formattedData[formattedData.length - 1].x,
					y: formattedData[formattedData.length - 1].y
				}, {
					x: formattedPredictedDate,
					y: predictedClosePrice
				}],
				borderColor: 'red',
				fill: false,
				pointRadius: 0,
				borderWidth: 0.5,
				borderDash: [5, 5]
			}]
		},
		options: {
			scales: {
				x: {
					ticks: {
						maxTicksLimit: 15 // 限制最大刻度數為 15
					}
				},
				y: {
					ticks: {
						beginAtZero: true
					}
				}
			}

		}
	});

	$("#mypredictresult").on("click", function () {
		window.location.href = "/Member/MyPredictResult"
	})
	$("#mystockid").on("click", function () {
		window.location.href = "/Home/StockCharts/" + @ViewBag.result.SnCode
		})
	$.ajax({
		url: "/StockModel/stocksnamewithcsv",
		method: "get",
		data: { data: @ViewBag.result.SnCode },
		success: function (e) {
			$("#stockname").text(`股票名稱: ${e[0]["label"]}`);
		}
	})

</script>
